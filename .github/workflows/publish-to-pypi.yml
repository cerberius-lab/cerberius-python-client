name: Publish Python Package to PyPI

on:
  release:
    types: [published] # Triggers when a new GitHub Release is published

jobs:
  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi # Optional: Define an environment for protection rules
      url: https://pypi.org/p/cerberius-python-client # Optional: Link to the PyPI project
    permissions:
      id-token: write # Necessary for trusted publishing (if you set that up on PyPI)
                      # For basic token auth, this isn't strictly needed but good to have for future.
                      # If not using trusted publishing, contents: read is enough for checkout.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # Or your preferred Python version for building

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1" # Or a recent version of Poetry
          virtualenvs-create: true
          virtualenvs-in-project: true # Good for caching if you add caching steps

      # Optional: Cache Poetry virtualenv
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('''**/poetry.lock''') }}

      - name: Install dependencies (if cache not hit)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root # Install deps only

      # The version in pyproject.toml should match the GitHub Release tag
      - name: Build package
        run: poetry build

      - name: Publish package to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish 